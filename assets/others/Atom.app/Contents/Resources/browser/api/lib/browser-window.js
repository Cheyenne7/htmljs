// Generated by CoffeeScript 1.6.3
(function() {
  var BrowserWindow, EventEmitter, IDWeakMap, app;

  EventEmitter = require('events').EventEmitter;

  IDWeakMap = require('id-weak-map');

  app = require('app');

  BrowserWindow = process.atomBinding('window').BrowserWindow;

  BrowserWindow.prototype.__proto__ = EventEmitter.prototype;

  BrowserWindow.windows = new IDWeakMap;

  BrowserWindow.prototype._init = function() {
    var id, menu;
    if (process.platform !== 'darwin') {
      menu = app.getApplicationMenu();
      if (menu != null) {
        this.setMenu(menu);
      }
    }
    id = BrowserWindow.windows.add(this);
    this.once('destroyed', function() {
      if (BrowserWindow.windows.has(id)) {
        return BrowserWindow.windows.remove(id);
      }
    });
    return this.on('render-view-deleted', function(event, processId, routingId) {
      return process.emit('ATOM_BROWSER_RELEASE_RENDER_VIEW', processId, routingId);
    });
  };

  BrowserWindow.prototype.toggleDevTools = function() {
    if (this.isDevToolsOpened()) {
      return this.closeDevTools();
    } else {
      return this.openDevTools();
    }
  };

  BrowserWindow.prototype.restart = function() {
    return this.loadUrl(this.getUrl());
  };

  BrowserWindow.prototype.setMenu = function(menu) {
    var _ref;
    if (process.platform === 'darwin') {
      throw new Error('BrowserWindow.setMenu is not available on OS X');
    }
    if ((menu != null ? (_ref = menu.constructor) != null ? _ref.name : void 0 : void 0) !== 'Menu') {
      throw new TypeError('Invalid menu');
    }
    this.menu = menu;
    return this.menu.attachToWindow(this);
  };

  BrowserWindow.getAllWindows = function() {
    var key, windows, _i, _len, _ref, _results;
    windows = BrowserWindow.windows;
    _ref = windows.keys();
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      key = _ref[_i];
      _results.push(windows.get(key));
    }
    return _results;
  };

  BrowserWindow.getFocusedWindow = function() {
    var window, windows, _i, _len;
    windows = BrowserWindow.getAllWindows();
    for (_i = 0, _len = windows.length; _i < _len; _i++) {
      window = windows[_i];
      if (window.isFocused()) {
        return window;
      }
    }
  };

  BrowserWindow.fromProcessIdAndRoutingId = function(processId, routingId) {
    var window, windows, _i, _len;
    windows = BrowserWindow.getAllWindows();
    for (_i = 0, _len = windows.length; _i < _len; _i++) {
      window = windows[_i];
      if (window.getProcessId() === processId && window.getRoutingId() === routingId) {
        return window;
      }
    }
  };

  module.exports = BrowserWindow;

}).call(this);
