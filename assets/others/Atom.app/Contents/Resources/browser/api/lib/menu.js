// Generated by CoffeeScript 1.6.3
(function() {
  var BrowserWindow, EventEmitter, Menu, MenuItem, applicationMenu, bindings, popup;

  BrowserWindow = require('browser-window');

  EventEmitter = require('events').EventEmitter;

  MenuItem = require('menu-item');

  bindings = process.atomBinding('menu');

  Menu = bindings.Menu;

  Menu.prototype.__proto__ = EventEmitter.prototype;

  popup = Menu.prototype.popup;

  Menu.prototype.popup = function(window) {
    if ((window != null ? window.constructor : void 0) !== BrowserWindow) {
      throw new TypeError('Invalid window');
    }
    return popup.call(this, window);
  };

  Menu.prototype.append = function(item) {
    return this.insert(this.getItemCount(), item);
  };

  Menu.prototype.insert = function(pos, item) {
    var _this = this;
    if ((item != null ? item.constructor : void 0) !== MenuItem) {
      throw new TypeError('Invalid item');
    }
    switch (item.type) {
      case 'normal':
        this.insertItem(pos, item.commandId, item.label);
        break;
      case 'checkbox':
        this.insertCheckItem(pos, item.commandId, item.label);
        break;
      case 'radio':
        this.insertRadioItem(pos, item.commandId, item.label, item.groupId);
        break;
      case 'separator':
        this.insertSeparator(pos);
        break;
      case 'submenu':
        this.insertSubMenu(pos, item.commandId, item.label, item.submenu);
    }
    if (item.sublabel != null) {
      this.setSublabel(pos, item.sublabel);
    }
    if (this.delegate == null) {
      this.commandsMap = {};
      this.items = [];
      this.delegate = {
        isCommandIdChecked: function(commandId) {
          var _ref;
          return (_ref = _this.commandsMap[commandId]) != null ? _ref.checked : void 0;
        },
        isCommandIdEnabled: function(commandId) {
          var _ref;
          return (_ref = _this.commandsMap[commandId]) != null ? _ref.enabled : void 0;
        },
        isCommandIdVisible: function(commandId) {
          var _ref;
          return (_ref = _this.commandsMap[commandId]) != null ? _ref.visible : void 0;
        },
        getAcceleratorForCommandId: function(commandId) {
          var _ref;
          return (_ref = _this.commandsMap[commandId]) != null ? _ref.accelerator : void 0;
        },
        executeCommand: function(commandId) {
          var activeItem;
          activeItem = _this.commandsMap[commandId];
          if (activeItem != null) {
            return activeItem.click();
          }
        }
      };
    }
    this.items.splice(pos, 0, item);
    return this.commandsMap[item.commandId] = item;
  };

  applicationMenu = null;

  Menu.setApplicationMenu = function(menu) {
    var w, windows, _i, _len, _results;
    if ((menu != null ? menu.constructor : void 0) !== Menu) {
      throw new TypeError('Invalid menu');
    }
    applicationMenu = menu;
    if (process.platform === 'darwin') {
      return bindings.setApplicationMenu(menu);
    } else {
      windows = BrowserWindow.getAllWindows();
      _results = [];
      for (_i = 0, _len = windows.length; _i < _len; _i++) {
        w = windows[_i];
        _results.push(w.setMenu(menu));
      }
      return _results;
    }
  };

  Menu.getApplicationMenu = function() {
    return applicationMenu;
  };

  Menu.sendActionToFirstResponder = bindings.sendActionToFirstResponder;

  Menu.buildFromTemplate = function(template) {
    var item, key, menu, menuItem, value, _i, _len;
    if (!Array.isArray(template)) {
      throw new TypeError('Invalid template for Menu');
    }
    menu = new Menu;
    for (_i = 0, _len = template.length; _i < _len; _i++) {
      item = template[_i];
      if (typeof item !== 'object') {
        throw new TypeError('Invalid template for MenuItem');
      }
      if (item.submenu != null) {
        item.submenu = Menu.buildFromTemplate(item.submenu);
      }
      menuItem = new MenuItem(item);
      for (key in item) {
        value = item[key];
        if (menuItem[key] == null) {
          menuItem[key] = value;
        }
      }
      menu.append(menuItem);
    }
    return menu;
  };

  module.exports = Menu;

}).call(this);
