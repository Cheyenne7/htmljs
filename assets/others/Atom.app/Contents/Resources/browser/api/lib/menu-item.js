// Generated by CoffeeScript 1.6.3
(function() {
  var BrowserWindow, MenuItem, nextCommandId;

  BrowserWindow = require('browser-window');

  nextCommandId = 0;

  MenuItem = (function() {
    MenuItem.types = ['normal', 'separator', 'submenu', 'checkbox', 'radio'];

    function MenuItem(options) {
      var Menu, click, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9,
        _this = this;
      Menu = require('menu');
      click = options.click, this.selector = options.selector, this.type = options.type, this.label = options.label, this.sublabel = options.sublabel, this.accelerator = options.accelerator, this.enabled = options.enabled, this.visible = options.visible, this.checked = options.checked, this.groupId = options.groupId, this.submenu = options.submenu;
      if ((this.type == null) && (this.submenu != null)) {
        this.type = 'submenu';
      }
      if (this.type === 'submenu' && ((_ref = this.submenu) != null ? _ref.constructor : void 0) !== Menu) {
        throw new Error('Invalid submenu');
      }
      this.type = (_ref1 = this.type) != null ? _ref1 : 'normal';
      this.label = (_ref2 = this.label) != null ? _ref2 : '';
      this.sublabel = (_ref3 = this.sublabel) != null ? _ref3 : '';
      this.accelerator = (_ref4 = this.accelerator) != null ? _ref4 : null;
      this.enabled = (_ref5 = this.enabled) != null ? _ref5 : true;
      this.visible = (_ref6 = this.visible) != null ? _ref6 : true;
      this.checked = (_ref7 = this.checked) != null ? _ref7 : false;
      this.groupId = (_ref8 = this.groupId) != null ? _ref8 : null;
      this.submenu = (_ref9 = this.submenu) != null ? _ref9 : null;
      if (MenuItem.types.indexOf(this.type) === -1) {
        throw new Error('Unknown menu type');
      }
      this.commandId = ++nextCommandId;
      this.click = function() {
        if (typeof click === 'function') {
          return click(_this, BrowserWindow.getFocusedWindow());
        } else if (typeof _this.selector === 'string') {
          return Menu.sendActionToFirstResponder(_this.selector);
        }
      };
    }

    return MenuItem;

  })();

  module.exports = MenuItem;

}).call(this);
